#!/usr/bin/env ruby

require 'rubygems'
require 'gisture'
require 'commander/import'

program :name, 'gisture'
program :version, Gisture::VERSION
program :description, 'Run one-off gists or files from the command line'

command :run do |c|
  c.syntax = 'gisture run <gist_or_file>'
  c.summary = 'Run a gist or file directly from the command line'
  c.description = 'Run a github gist or a file or gisture gist from a github repo'

  c.example 'Run a gist using the defaults', 'gisture run markrebec/520b474ea0248d1a0a74'
  c.example 'Clone your gist and run it from within the cloned path', 'gisture run markrebec/520b474ea0248d1a0a74 -c'

  c.option '-f', '--filename FILENAME', String, 'Specify a filename if your gist has multiple files. Only applies when executing a github gist'
  c.option '-s', '--strategy STRATEGY', String, "Execution strategy to use. Defaults to 'eval'"
  c.option '-e', '--evaluator CLASS_NAME', String, "Use a custom evaluator class. Only applies when using the 'eval' strategy"
  c.option '-c', '--clone', 'Clone the gist or repo into a local tmp path and run from that working directory'

  c.action do |args, options|
    raise ArgumentError, "Please provide a gist or file URI" if args.empty?

    gist_or_repo = Gisture.new(args.first, strategy: options.strategy, filename: options.filename, evaluator: options.evaluator)

    options.clone ? gist_or_repo.clone! : gist_or_repo.destroy_clone!

    result = gist_or_repo.run!

    if options.strategy == 'exec'
      puts result
    else
      result
    end
  end
end

command :clone do |c|
  c.syntax = 'gisture clone <gist_or_repo>'
  c.summary = 'Clone a github gist or repo into a tempdir'
  c.description = 'Clone a github gist or repo into a tempdir directly from the command line'
  c.example 'Clone a gist', 'gisture clone markrebec/520b474ea0248d1a0a74'
  c.action do |args, options|
    raise ArgumentError, "Please provide a gist or file URI" if args.empty?
    gist_or_repo = Gisture.new(args.first)
    gist_or_repo.clone!
  end
end
